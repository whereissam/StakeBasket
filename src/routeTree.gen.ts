/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as FeaturesRouteImport } from './routes/features'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as ContractsRouteImport } from './routes/contracts'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'

const FeaturesRoute = FeaturesRouteImport.update({
  id: '/features',
  path: '/features',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ContractsRoute = ContractsRouteImport.update({
  id: '/contracts',
  path: '/contracts',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contracts': typeof ContractsRoute
  '/dashboard': typeof DashboardRoute
  '/features': typeof FeaturesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contracts': typeof ContractsRoute
  '/dashboard': typeof DashboardRoute
  '/features': typeof FeaturesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/contracts': typeof ContractsRoute
  '/dashboard': typeof DashboardRoute
  '/features': typeof FeaturesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/contracts' | '/dashboard' | '/features'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/contracts' | '/dashboard' | '/features'
  id: '__root__' | '/' | '/about' | '/contracts' | '/dashboard' | '/features'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ContractsRoute: typeof ContractsRoute
  DashboardRoute: typeof DashboardRoute
  FeaturesRoute: typeof FeaturesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/features': {
      id: '/features'
      path: '/features'
      fullPath: '/features'
      preLoaderRoute: typeof FeaturesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contracts': {
      id: '/contracts'
      path: '/contracts'
      fullPath: '/contracts'
      preLoaderRoute: typeof ContractsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ContractsRoute: ContractsRoute,
  DashboardRoute: DashboardRoute,
  FeaturesRoute: FeaturesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

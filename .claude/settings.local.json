{
  "permissions": {
    "allow": [
      "Bash(forge init:*)",
      "Bash(git checkout:*)",
      "Bash(rm:*)",
      "Bash(forge build:*)",
      "Bash(mkdir:*)",
      "Bash(forge script:*)",
      "Bash(forge test:*)",
      "Bash(ls:*)",
      "Bash(npm install:*)",
      "Bash(npm run dev:*)",
      "Bash(npx hardhat:*)",
      "Bash(grep:*)",
      "Bash(nvm use:*)",
      "Bash(node:*)",
      "Bash(source:*)",
      "Bash(bun run:*)",
      "Bash(npm run build:*)",
      "Bash(find:*)",
      "Bash(npm run seed:base-sepolia:*)",
      "Bash(NODE_OPTIONS=\"--openssl-legacy-provider\" npm run dev)",
      "Bash(rg:*)",
      "Bash(npm run test:components:*)",
      "Bash(npm test:*)",
      "Bash(mv:*)",
      "Bash(npm run lint)",
      "Bash(npm run deploy:local:*)",
      "Bash(npm run test:blockchain:*)",
      "Bash(chmod:*)",
      "Bash(curl:*)",
      "Bash(npm run check:frontend:*)",
      "Bash(npx:*)",
      "Bash(npm install:*)",
      "Bash(npm run dev:*)",
      "Bash(npx hardhat:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "WebFetch(domain:docs.coredao.org)",
      "WebFetch(domain:lstbtc.coredao.org)",
      "Bash(rm:*)",
      "Bash(npm run build:*)",
      "Bash(rg:*)",
      "Bash(DOTENV_CONFIG_PATH=.env.test npx hardhat run scripts/deploy.cjs --network coreTestnet)",
      "Bash(npm run lint)",
      "Bash(node:*)",
      "Bash(bun install:*)",
      "Bash(timeout:*)",
      "Bash(bun run:*)",
      "Bash(ls:*)",
      "WebFetch(domain:chainlist.org)",
      "Bash(npm run compile:*)",
      "Bash(cat:*)",
      "Bash(pkill:*)",
      "mcp__ide__getDiagnostics",
      "WebFetch(domain:coredao.org)",
      "Bash(true)",
      "Bash(npm run:*)",
      "Bash(touch:*)",
      "Bash(bun add:*)",
      "Bash(pgrep:*)",
      "Bash(npm audit:*)",
      "Bash(cp:*)",
      "Bash(./organize-root.sh)",
      "Bash(diff:*)",
      "Bash(./final-cleanup.sh)",
      "Bash(npm start)",
      "Bash(NETWORK=coreTestnet2 npm start)",
      "Bash(NETWORK=coreTestnet2 timeout 8s npm start)",
      "Bash(NETWORK=coreTestnet2 timeout 8s npm --prefix backend start)",
      "Bash(git restore:*)",
      "WebFetch(domain:market.api3.org)",
      "Bash(# Move current working verification script to organized location\nmv verify-deployment.cjs tests/organized/core/verify-deployment.cjs\n\n# Move essential test scripts to organized structure\nmv scripts/automated-test-suite.cjs tests/organized/integration/\nmv scripts/demo-etf-functionality.cjs tests/organized/integration/\nmv scripts/test-deployed-contracts.cjs tests/organized/integration/\n\n# Move utility scripts\nmkdir -p tests/organized/utilities\ncp scripts/get-test-tokens.cjs tests/organized/utilities/ 2>/dev/null || echo \"File doesn't exist, skipping\"\ncp scripts/check-balances.cjs tests/organized/utilities/ 2>/dev/null || echo \"File doesn't exist, skipping\")",
      "Bash(# Move deprecated/old test files to deprecated folder\nmv *test*.cjs tests/organized/deprecated/ 2>/dev/null || echo \"No matching files\"\nmv *debug*.cjs tests/organized/deprecated/ 2>/dev/null || echo \"No matching files\"\nmv *fix*.cjs tests/organized/deprecated/ 2>/dev/null || echo \"No matching files\"\nmv *stake-test*.cjs tests/organized/deprecated/ 2>/dev/null || echo \"No matching files\"\nmv ultimate-staking-fix.cjs tests/organized/deprecated/ 2>/dev/null || echo \"File doesn't exist\")",
      "Bash(# Move specific deprecated files one by one\nfind . -maxdepth 1 -name \"*debug*\" -name \"*.cjs\" -exec mv {} tests/organized/deprecated/ \\; 2>/dev/null || echo \"No debug files found\"\nfind . -maxdepth 1 -name \"*fix*\" -name \"*.cjs\" -exec mv {} tests/organized/deprecated/ \\; 2>/dev/null || echo \"No fix files found\"\nfind . -maxdepth 1 -name \"*test*\" -name \"*.cjs\" -exec mv {} tests/organized/deprecated/ \\; 2>/dev/null || echo \"No test files found\"\n\n# Move specific files we know exist\nmv check-*.cjs tests/organized/deprecated/ 2>/dev/null || echo \"No check files\"\nmv deploy-*.cjs tests/organized/deprecated/ 2>/dev/null || echo \"No deploy files\"  \nmv ultimate-staking-fix.cjs tests/organized/deprecated/ 2>/dev/null || echo \"File doesn't exist\"\nmv testnet2-diagnosis.cjs tests/organized/deprecated/ 2>/dev/null || echo \"File doesn't exist\")",
      "Bash(# Move remaining utility scripts\nmv update-*.cjs tests/organized/utilities/\n\n# Create a clean README for the organized tests\ncat > tests/organized/README.md << 'EOF'\n# Organized Test Suite\n\nThis directory contains all testing and verification scripts, properly organized.\n\n## üìÅ Directory Structure\n\n### `/core/`\nEssential verification and deployment validation scripts:\n- `verify-deployment.cjs` - Main deployment verification script\n\n### `/integration/` \nComplete integration test suites:\n- `automated-test-suite.cjs` - Full automated test suite\n- `demo-etf-functionality.cjs` - ETF functionality demo\n- `test-deployed-contracts.cjs` - Interactive contract testing\n\n### `/utilities/`\nHelper scripts for testing and maintenance:\n- `update-*.cjs` - Contract update utilities\n- `get-test-tokens.cjs` - Token acquisition scripts\n- `check-balances.cjs` - Balance verification\n\n### `/deprecated/`\nLegacy test files kept for reference:\n- Old debugging scripts\n- Outdated test implementations\n- Historical fix attempts\n\n## üöÄ Quick Start\n\n**Verify Deployment:**\n```bash\nnpx hardhat run tests/organized/core/verify-deployment.cjs --network localhost\n```\n\n**Run Full Test Suite:**\n```bash\nnpx hardhat run tests/organized/integration/automated-test-suite.cjs --network localhost\n```\n\n**Interactive Testing:**\n```bash\nnpx hardhat run tests/organized/integration/test-deployed-contracts.cjs --network localhost\n```\nEOF)",
      "Bash(# Update package.json scripts to use organized tests\ncat > temp_scripts.json << 'EOF'\n{\n  \"test:verify\": \"npx hardhat run tests/organized/core/verify-deployment.cjs --network localhost\",\n  \"test:integration\": \"npx hardhat run tests/organized/integration/automated-test-suite.cjs --network localhost\", \n  \"test:demo\": \"npx hardhat run tests/organized/integration/demo-etf-functionality.cjs --network localhost\",\n  \"test:interactive\": \"npx hardhat run tests/organized/integration/test-deployed-contracts.cjs --network localhost\"\n}\nEOF\n\n# Show what scripts we should add\necho \"Add these scripts to package.json:\"\ncat temp_scripts.json\nrm temp_scripts.json)",
      "Bash(# Clean up additional scattered files\nrm -f *.md.bak* 2>/dev/null || echo \"No backup files to clean\"\n\n# Check what test files remain in the test/ directory and organize them\nls -la test/ | head -10)",
      "Bash(# Move formal test files from /test directory to organized structure\nmkdir -p tests/organized/integration/hardhat-tests\nmv test/*.test.cjs tests/organized/integration/hardhat-tests/ 2>/dev/null || echo \"No .test.cjs files\"\n\n# Move remaining test files to deprecated\nmv test/*.cjs tests/organized/deprecated/ 2>/dev/null || echo \"No .cjs files to move\"\n\n# Clean up any remaining test artifacts in root\nrm -rf temp/ 2>/dev/null || echo \"No temp directory\"\n\n# Show the final organized structure\necho \"üìÅ Final Organized Test Structure:\"\ntree tests/organized/ -I node_modules 2>/dev/null || find tests/organized/ -type f -name \"*.cjs\" | sort)",
      "Bash(# Test the organized structure works\necho \"üß™ Testing Organized Test Structure...\"\necho \"=======================================\"\n\n# Test the main verification script\necho \"‚úÖ Running verification test:\"\nnpm run test:verify\n\necho \"\"\necho \"üìÅ Clean Project Structure:\"\necho \"- tests/organized/core/ - Essential verification (1 file)\"\necho \"- tests/organized/integration/ - Integration tests (15 files)\"  \necho \"- tests/organized/utilities/ - Helper scripts (5 files)\"\necho \"- tests/organized/deprecated/ - Legacy files (32 files)\"\necho \"\"\necho \"üéØ Use these npm commands:\"\necho \"- npm run test:verify      - Verify deployment\"\necho \"- npm run test:demo        - Run ETF demo\"\necho \"- npm run test:integration - Full test suite\"\necho \"- npm run test:interactive - Interactive testing\")",
      "Bash(jq:*)",
      "Bash(git add:*)",
      "Bash(git reset:*)",
      "Bash(sed:*)",
      "WebSearch",
      "WebFetch(domain:docs.chain.link)",
      "WebFetch(domain:data.chain.link)",
      "WebFetch(domain:docs.pyth.network)",
      "Bash(DOTENV_CONFIG_PATH=.env.test npx hardhat run scripts/deploy.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run scripts/deploy.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run test-deposit.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run test-large-deposit.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run update-price-feed.cjs --network coreTestnet2)",
      "WebFetch(domain:insights.pyth.network)",
      "WebSearch",
      "WebFetch(domain:pyth.network)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run scripts/update-prices.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run check-current-prices.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run test-dual-staking-real.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run deploy-dual-staking-basket.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run debug-dual-staking.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run fix-price-feed.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run simple-deposit-test.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run update-real-prices.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run check-minimums.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run test-real-working-dual-staking.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run test-simple-dual-staking.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run debug-contract-calls.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run check-basket-permissions.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run test-basket-minting.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run test-pricefeed-accuracy.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run check-current-prices-simple.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run update-prices-debug.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run setup-switchboard-prices.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run get-real-token-prices.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run update-real-market-prices.cjs --network coreTestnet2)",
      "WebFetch(domain:www.coingecko.com)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run debug-redeem-issue.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run use-switchboard-realtime.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run fix-price-staleness.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run test-base-tier.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run check-allowances.cjs --network coreTestnet2)",
      "WebFetch(domain:docs.switchboard.xyz)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat console --network coreTestnet2 --show-stack-traces)",
      "Bash(DOTENV_CONFIG_PATH=.env node debug-btc-token.cjs)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run deploy-dual-staking-fixed.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run debug-btc-token.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run test-dual-staking-simple.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run check-price-feed-status.cjs --network coreTestnet2)",
      "Bash(DOTENV_CONFIG_PATH=.env npx hardhat run update-specific-pricefeed.cjs --network coreTestnet2)",
      "Bash(__NEW_LINE__ echo \"‚úÖ GITIGNORE FIXED!\")",
      "Bash(__NEW_LINE__ echo \"üõ°Ô∏è TESTS SECURITY SUMMARY:\")",
      "Bash(npm uninstall:*)"
    ],
    "deny": []
  }
}